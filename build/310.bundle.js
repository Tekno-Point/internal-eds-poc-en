(self.webpackChunk_adobe_aem_boilerplate = self.webpackChunk_adobe_aem_boilerplate || []).push([[310, 640, 801], {
  801: (e, t, r) => {
    r.r(t), r.d(t, { default: () => i }); const n = {
      loop: !0,
      slidesPerView: 3,
      grabCursor: !0,
      autoplay: !1,
      navigation: {},
      pagination: { clickable: !0 },
      breakpoints: {
        300: { slidesPerView: 1.3 }, 780: { slidesPerView: 1.2 }, 992: { slidesPerView: 3 }, 1199: { slidesPerView: 3 },
      },
    }; const i = {
      'one-slide-only': {
        slidesPerView: 1,
        grabCursor: !0,
        autoplay: { delay: 5e7, disableOnInteraction: !1 },
        navigation: {},
        pagination: { clickable: !0 },
        breakpoints: {
          300: { slidesPerView: 1 }, 780: { slidesPerView: 1 }, 992: { slidesPerView: 1 }, 1199: { slidesPerView: 1 },
        },
      },
      'two-slides-only': {
        loop: !0,
        slidesPerView: 2,
        grabCursor: !0,
        navigation: {},
        pagination: { clickable: !0 },
        breakpoints: {
          300: { slidesPerView: 1, grabCursor: !0 }, 780: { slidesPerView: 1, grabCursor: !0 }, 992: { slidesPerView: 2 }, 1199: { slidesPerView: 2 },
        },
      },
      'three-slides-only': n,
      default: n,
    };
  },
  310: (e, t, r) => { r.r(t), r.d(t, { default: () => s }); const n = r(658); const i = r(819); const a = r(801); function o(e, t) { (t == null || t > e.length) && (t = e.length); for (var r = 0, n = Array(t); r < t; r++)n[r] = e[r]; return n; } const l = { embed: r(640).default }; function s(e) { const t = Array.from(e.children); const r = t[0]; let s = a.default.default; Array.from(e.classList).forEach(((e) => { a.default[e] && (s = a.default[e]); })); const c = t.slice(1); const u = (0, n.n)('div', { classes: ['swiper-wrapper'] }); const d = (0, n.n)('div', { classes: ['swiper-button-prev'] }); const p = (0, n.n)('div', { classes: ['swiper-button-next'] }); const f = (0, n.n)('div', { classes: ['swiper-pagination'] }); r.remove(), c.forEach(((e) => { let t; let r; const i = (t = Array.from(e.children), r = 4, (function (e) { if (Array.isArray(e)) return e; }(t)) || (function (e, t) { let r = e == null ? null : typeof Symbol !== 'undefined' && e[Symbol.iterator] || e['@@iterator']; if (r != null) { let n; let i; let a; let o; const l = []; let s = !0; let c = !1; try { if (a = (r = r.call(e)).next, t === 0) { if (Object(r) !== r) return; s = !1; } else for (;!(s = (n = a.call(r)).done) && (l.push(n.value), l.length !== t); s = !0); } catch (e) { c = !0, i = e; } finally { try { if (!s && r.return != null && (o = r.return(), Object(o) !== o)) return; } finally { if (c) throw i; } } return l; } }(t, r)) || (function (e, t) { if (e) { if (typeof e === 'string') return o(e, t); let r = {}.toString.call(e).slice(8, -1); return r === 'Object' && e.constructor && (r = e.constructor.name), r === 'Map' || r === 'Set' ? Array.from(e) : r === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? o(e, t) : void 0; } }(t, r)) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }())); const a = i[0]; const s = i[1]; const c = i[2]; const d = i[3]; const p = (0, n.n)('div', { classes: ['swiper-slide'] }); let f = null; a.textContent.trim().split(',').forEach(((e) => { p.classList.add(e.trim()), l[e.trim()] && (f = l[e.trim()]); })), f ? (f(s), p.append(s)) : (p.append(s), p.append(c), p.append(d)), u.append(p), a.remove(); })), s.navigation.nextEl = p, s.navigation.prevEl = d, s.pagination.el = f, e.classList.add('swiper', 'mySwiper'), e.append(u), e.append(p), e.append(d), e.append(f), new IntersectionObserver(((t) => { t.forEach(((t) => { t.isIntersecting && (0, i.default)(e, s); })); })).observe(e); } },
  640: (e, t, r) => { function n(e, t) { return (function (e) { if (Array.isArray(e)) return e; }(e)) || (function (e, t) { let r = e == null ? null : typeof Symbol !== 'undefined' && e[Symbol.iterator] || e['@@iterator']; if (r != null) { let n; let i; let a; let o; const l = []; let s = !0; let c = !1; try { if (a = (r = r.call(e)).next, t === 0) { if (Object(r) !== r) return; s = !1; } else for (;!(s = (n = a.call(r)).done) && (l.push(n.value), l.length !== t); s = !0); } catch (e) { c = !0, i = e; } finally { try { if (!s && r.return != null && (o = r.return(), Object(o) !== o)) return; } finally { if (c) throw i; } } return l; } }(e, t)) || (function (e, t) { if (e) { if (typeof e === 'string') return i(e, t); let r = {}.toString.call(e).slice(8, -1); return r === 'Object' && e.constructor && (r = e.constructor.name), r === 'Map' || r === 'Set' ? Array.from(e) : r === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? i(e, t) : void 0; } }(e, t)) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }()); } function i(e, t) { (t == null || t > e.length) && (t = e.length); for (var r = 0, n = Array(t); r < t; r++)n[r] = e[r]; return n; }r.r(t), r.d(t, { default: () => c }); const a = function (e, t) { const r = new URLSearchParams(e.search); const i = t ? '&muted=1&autoplay=1' : ''; let a = r.get('v') ? encodeURIComponent(r.get('v')) : ''; const o = e.pathname; return e.origin.includes('youtu.be') && (a = n(e.pathname.split('/'), 2)[1]), '<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;">\n          <iframe src="https://www.youtube.com'.concat(a ? '/embed/'.concat(a, '?rel=0&v=').concat(a).concat(i) : o, '" style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" \n          allow="autoplay; fullscreen; picture-in-picture; encrypted-media; accelerometer; gyroscope; picture-in-picture" allowfullscreen="" scrolling="no" title="Content from Youtube" loading="lazy"></iframe>\n        </div>'); }; const o = function (e, t) { const r = n(e.pathname.split('/'), 2)[1]; const i = t ? '?muted=1&autoplay=1' : ''; return '<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;">\n          <iframe src="https://player.vimeo.com/video/'.concat(r).concat(i, '" \n          style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" \n          frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen  \n          title="Content from Vimeo" loading="lazy"></iframe>\n        </div>'); }; const l = function (e) { let t; let r; const n = '<blockquote class="twitter-tweet"><a href="'.concat(e.href, '"></a></blockquote>'); return t = document.querySelector('head'), (r = document.createElement('script')).src = 'https://platform.twitter.com/widgets.js', r.onload = void 0, t.append(r), n; }; const s = function (e, t, r) { if (!e.classList.contains('embed-is-loaded')) { const n = [{ match: ['youtube', 'youtu.be'], embed: a }, { match: ['vimeo'], embed: o }, { match: ['twitter'], embed: l }].find(((e) => e.match.some(((e) => t.includes(e))))); const i = new URL(t); n ? (e.innerHTML = n.embed(i, r), e.classList = 'block embed embed-'.concat(n.match[0])) : (e.innerHTML = (function (e) { return '<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;">\n        <iframe src="'.concat(e.href, '" style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" allowfullscreen=""\n          scrolling="no" allow="encrypted-media" title="Content from ').concat(e.hostname, '" loading="lazy">\n        </iframe>\n      </div>'); }(i)), e.classList = 'block embed'), e.classList.add('embed-is-loaded'); } }; function c(e) { const t = e.querySelector('picture'); const r = e.querySelector('a').href; if (e.textContent = '', t) { const n = document.createElement('div'); n.className = 'embed-placeholder', n.innerHTML = '<div class="embed-placeholder-play"><button type="button" title="Play"></button></div>', n.prepend(t), n.addEventListener('click', (() => { s(e, r, !0); })), e.append(n); } else { var i = new IntersectionObserver(((t) => { t.some(((e) => e.isIntersecting)) && (i.disconnect(), s(e, r)); })); i.observe(e); } } },
}]);
