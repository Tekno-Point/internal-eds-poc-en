(self.webpackChunk_adobe_aem_boilerplate = self.webpackChunk_adobe_aem_boilerplate || []).push([[316], { 316: (r, t, e) => { function n(r) { return (function (r) { if (Array.isArray(r)) return o(r); }(r)) || (function (r) { if (typeof Symbol !== 'undefined' && r[Symbol.iterator] != null || r['@@iterator'] != null) return Array.from(r); }(r)) || (function (r, t) { if (r) { if (typeof r === 'string') return o(r, t); let e = {}.toString.call(r).slice(8, -1); return e === 'Object' && r.constructor && (e = r.constructor.name), e === 'Map' || e === 'Set' ? Array.from(r) : e === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e) ? o(r, t) : void 0; } }(r)) || (function () { throw new TypeError('Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }()); } function o(r, t) { (t == null || t > r.length) && (t = r.length); for (var e = 0, n = Array(t); e < t; e++)n[e] = r[e]; return n; } function a(r) { const t = n(r.firstElementChild.children); r.classList.add('columns-'.concat(t.length, '-cols')), n(r.children).forEach(((r) => { n(r.children).forEach(((r) => { const t = r.querySelector('picture'); if (t) { const e = t.closest('div'); e && e.children.length === 1 && e.classList.add('columns-img-col'); } })); })); }e.r(t), e.d(t, { default: () => a }); } }]);
