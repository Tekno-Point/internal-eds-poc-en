/*! For license information please see 676.bundle.js.LICENSE.txt */

(self.webpackChunk_adobe_aem_boilerplate = self.webpackChunk_adobe_aem_boilerplate || []).push([[676], {
  676: (t, r, e) => {
    e.r(r), e.d(r, { default: () => u }); const n = e(927); const o = e(658); function i(t) { return i = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (t) { return typeof t; } : function (t) { return t && typeof Symbol === 'function' && t.constructor === Symbol && t !== Symbol.prototype ? 'symbol' : typeof t; }, i(t); } function a() {
      a = function () { return r; }; let t; var r = {}; const e = Object.prototype; const n = e.hasOwnProperty; const o = Object.defineProperty || function (t, r, e) { t[r] = e.value; }; const c = typeof Symbol === 'function' ? Symbol : {}; const u = c.iterator || '@@iterator'; const f = c.asyncIterator || '@@asyncIterator'; const l = c.toStringTag || '@@toStringTag'; function h(t, r, e) {
        return Object.defineProperty(t, r, {
          value: e, enumerable: !0, configurable: !0, writable: !0,
        }), t[r];
      } try { h({}, ''); } catch (t) { h = function (t, r, e) { return t[r] = e; }; } function s(t, r, e, n) { const i = r && r.prototype instanceof w ? r : w; const a = Object.create(i.prototype); const c = new T(n || []); return o(a, '_invoke', { value: S(t, e, c) }), a; } function p(t, r, e) { try { return { type: 'normal', arg: t.call(r, e) }; } catch (t) { return { type: 'throw', arg: t }; } }r.wrap = s; const y = 'suspendedStart'; const v = 'suspendedYield'; const d = 'executing'; const m = 'completed'; const g = {}; function w() {} function b() {} function L() {} let x = {}; h(x, u, (function () { return this; })); const E = Object.getPrototypeOf; const _ = E && E(E(C([]))); _ && _ !== e && n.call(_, u) && (x = _); const O = L.prototype = w.prototype = Object.create(x); function j(t) { ['next', 'throw', 'return'].forEach(((r) => { h(t, r, (function (t) { return this._invoke(r, t); })); })); } function k(t, r) { function e(o, a, c, u) { const f = p(t[o], t, a); if (f.type !== 'throw') { const l = f.arg; const h = l.value; return h && i(h) == 'object' && n.call(h, '__await') ? r.resolve(h.__await).then(((t) => { e('next', t, c, u); }), ((t) => { e('throw', t, c, u); })) : r.resolve(h).then(((t) => { l.value = t, c(l); }), ((t) => e('throw', t, c, u))); }u(f.arg); } let a; o(this, '_invoke', { value(t, n) { function o() { return new r(((r, o) => { e(t, n, r, o); })); } return a = a ? a.then(o, o) : o(); } }); } function S(r, e, n) { let o = y; return function (i, a) { if (o === d) throw Error('Generator is already running'); if (o === m) { if (i === 'throw') throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a; ;) { const c = n.delegate; if (c) { const u = P(c, n); if (u) { if (u === g) continue; return u; } } if (n.method === 'next')n.sent = n._sent = n.arg; else if (n.method === 'throw') { if (o === y) throw o = m, n.arg; n.dispatchException(n.arg); } else n.method === 'return' && n.abrupt('return', n.arg); o = d; const f = p(r, e, n); if (f.type === 'normal') { if (o = n.done ? m : v, f.arg === g) continue; return { value: f.arg, done: n.done }; }f.type === 'throw' && (o = m, n.method = 'throw', n.arg = f.arg); } }; } function P(r, e) { const n = e.method; const o = r.iterator[n]; if (o === t) return e.delegate = null, n === 'throw' && r.iterator.return && (e.method = 'return', e.arg = t, P(r, e), e.method === 'throw') || n !== 'return' && (e.method = 'throw', e.arg = new TypeError(`The iterator does not provide a '${n}' method`)), g; const i = p(o, r.iterator, e.arg); if (i.type === 'throw') return e.method = 'throw', e.arg = i.arg, e.delegate = null, g; const a = i.arg; return a ? a.done ? (e[r.resultName] = a.value, e.next = r.nextLoc, e.method !== 'return' && (e.method = 'next', e.arg = t), e.delegate = null, g) : a : (e.method = 'throw', e.arg = new TypeError('iterator result is not an object'), e.delegate = null, g); } function G(t) { const r = { tryLoc: t[0] }; 1 in t && (r.catchLoc = t[1]), 2 in t && (r.finallyLoc = t[2], r.afterLoc = t[3]), this.tryEntries.push(r); } function N(t) { const r = t.completion || {}; r.type = 'normal', delete r.arg, t.completion = r; } function T(t) { this.tryEntries = [{ tryLoc: 'root' }], t.forEach(G, this), this.reset(!0); } function C(r) { if (r || r === '') { const e = r[u]; if (e) return e.call(r); if (typeof r.next === 'function') return r; if (!isNaN(r.length)) { let o = -1; const a = function e() { for (;++o < r.length;) if (n.call(r, o)) return e.value = r[o], e.done = !1, e; return e.value = t, e.done = !0, e; }; return a.next = a; } } throw new TypeError(`${i(r)} is not iterable`); } return b.prototype = L, o(O, 'constructor', { value: L, configurable: !0 }), o(L, 'constructor', { value: b, configurable: !0 }), b.displayName = h(L, l, 'GeneratorFunction'), r.isGeneratorFunction = function (t) { const r = typeof t === 'function' && t.constructor; return !!r && (r === b || (r.displayName || r.name) === 'GeneratorFunction'); }, r.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, L) : (t.__proto__ = L, h(t, l, 'GeneratorFunction')), t.prototype = Object.create(O), t; }, r.awrap = function (t) { return { __await: t }; }, j(k.prototype), h(k.prototype, f, (function () { return this; })), r.AsyncIterator = k, r.async = function (t, e, n, o, i) { void 0 === i && (i = Promise); const a = new k(s(t, e, n, o), i); return r.isGeneratorFunction(e) ? a : a.next().then(((t) => (t.done ? t.value : a.next()))); }, j(O), h(O, l, 'Generator'), h(O, u, (function () { return this; })), h(O, 'toString', (() => '[object Generator]')), r.keys = function (t) { const r = Object(t); const e = []; for (const n in r)e.push(n); return e.reverse(), function t() { for (;e.length;) { const n = e.pop(); if (n in r) return t.value = n, t.done = !1, t; } return t.done = !0, t; }; }, r.values = C, T.prototype = {
        constructor: T, reset(r) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = 'next', this.arg = t, this.tryEntries.forEach(N), !r) for (const e in this)e.charAt(0) === 't' && n.call(this, e) && !isNaN(+e.slice(1)) && (this[e] = t); }, stop() { this.done = !0; const t = this.tryEntries[0].completion; if (t.type === 'throw') throw t.arg; return this.rval; }, dispatchException(r) { if (this.done) throw r; const e = this; function o(n, o) { return c.type = 'throw', c.arg = r, e.next = n, o && (e.method = 'next', e.arg = t), !!o; } for (let i = this.tryEntries.length - 1; i >= 0; --i) { const a = this.tryEntries[i]; var c = a.completion; if (a.tryLoc === 'root') return o('end'); if (a.tryLoc <= this.prev) { const u = n.call(a, 'catchLoc'); const f = n.call(a, 'finallyLoc'); if (u && f) { if (this.prev < a.catchLoc) return o(a.catchLoc, !0); if (this.prev < a.finallyLoc) return o(a.finallyLoc); } else if (u) { if (this.prev < a.catchLoc) return o(a.catchLoc, !0); } else { if (!f) throw Error('try statement without catch or finally'); if (this.prev < a.finallyLoc) return o(a.finallyLoc); } } } }, abrupt(t, r) { for (let e = this.tryEntries.length - 1; e >= 0; --e) { const o = this.tryEntries[e]; if (o.tryLoc <= this.prev && n.call(o, 'finallyLoc') && this.prev < o.finallyLoc) { var i = o; break; } }i && (t === 'break' || t === 'continue') && i.tryLoc <= r && r <= i.finallyLoc && (i = null); const a = i ? i.completion : {}; return a.type = t, a.arg = r, i ? (this.method = 'next', this.next = i.finallyLoc, g) : this.complete(a); }, complete(t, r) { if (t.type === 'throw') throw t.arg; return t.type === 'break' || t.type === 'continue' ? this.next = t.arg : t.type === 'return' ? (this.rval = this.arg = t.arg, this.method = 'return', this.next = 'end') : t.type === 'normal' && r && (this.next = r), g; }, finish(t) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const e = this.tryEntries[r]; if (e.finallyLoc === t) return this.complete(e.completion, e.afterLoc), N(e), g; } }, catch(t) { for (let r = this.tryEntries.length - 1; r >= 0; --r) { const e = this.tryEntries[r]; if (e.tryLoc === t) { const n = e.completion; if (n.type === 'throw') { var o = n.arg; N(e); } return o; } } throw Error('illegal catch attempt'); }, delegateYield(r, e, n) { return this.delegate = { iterator: C(r), resultName: e, nextLoc: n }, this.method === 'next' && (this.arg = t), g; },
      }, r;
    } function c(t, r, e, n, o, i, a) { try { var c = t[i](a); var u = c.value; } catch (t) { return void e(t); }c.done ? r(u) : Promise.resolve(u).then(n, o); } function u(t) { return f.apply(this, arguments); } function f() { let t; return t = a().mark((function t(r) { let e; let i; let c; let u; return a().wrap(((t) => { for (;;) switch (t.prev = t.next) { case 0: return e = (0, n.yb)('footer'), i = e ? new URL(e, window.location).pathname : '/footer', t.next = 4, (0, o.LL)(i); case 4: for (c = t.sent, r.textContent = '', u = document.createElement('div'); c.firstElementChild;)u.append(c.firstElementChild); r.append(u); case 9: case 'end': return t.stop(); } }), t); })), f = function () { const r = this; const e = arguments; return new Promise(((n, o) => { const i = t.apply(r, e); function a(t) { c(i, n, o, a, u, 'next', t); } function u(t) { c(i, n, o, a, u, 'throw', t); }a(void 0); })); }, f.apply(this, arguments); }
  },
}]);
