(self.webpackChunk_adobe_aem_boilerplate = self.webpackChunk_adobe_aem_boilerplate || []).push([[596, 640], { 640: (e, t, n) => { function r(e, t) { return (function (e) { if (Array.isArray(e)) return e; }(e)) || (function (e, t) { let n = e == null ? null : typeof Symbol !== 'undefined' && e[Symbol.iterator] || e['@@iterator']; if (n != null) { let r; let o; let i; let a; const l = []; let c = !0; let u = !1; try { if (i = (n = n.call(e)).next, t === 0) { if (Object(n) !== n) return; c = !1; } else for (;!(c = (r = i.call(n)).done) && (l.push(r.value), l.length !== t); c = !0); } catch (e) { u = !0, o = e; } finally { try { if (!c && n.return != null && (a = n.return(), Object(a) !== a)) return; } finally { if (u) throw o; } } return l; } }(e, t)) || (function (e, t) { if (e) { if (typeof e === 'string') return o(e, t); let n = {}.toString.call(e).slice(8, -1); return n === 'Object' && e.constructor && (n = e.constructor.name), n === 'Map' || n === 'Set' ? Array.from(e) : n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? o(e, t) : void 0; } }(e, t)) || (function () { throw new TypeError('Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'); }()); } function o(e, t) { (t == null || t > e.length) && (t = e.length); for (var n = 0, r = Array(t); n < t; n++)r[n] = e[n]; return r; }n.r(t), n.d(t, { default: () => u }); const i = function (e, t) { const n = new URLSearchParams(e.search); const o = t ? '&muted=1&autoplay=1' : ''; let i = n.get('v') ? encodeURIComponent(n.get('v')) : ''; const a = e.pathname; return e.origin.includes('youtu.be') && (i = r(e.pathname.split('/'), 2)[1]), '<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;">\n          <iframe src="https://www.youtube.com'.concat(i ? '/embed/'.concat(i, '?rel=0&v=').concat(i).concat(o) : a, '" style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" \n          allow="autoplay; fullscreen; picture-in-picture; encrypted-media; accelerometer; gyroscope; picture-in-picture" allowfullscreen="" scrolling="no" title="Content from Youtube" loading="lazy"></iframe>\n        </div>'); }; const a = function (e, t) { const n = r(e.pathname.split('/'), 2)[1]; const o = t ? '?muted=1&autoplay=1' : ''; return '<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;">\n          <iframe src="https://player.vimeo.com/video/'.concat(n).concat(o, '" \n          style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" \n          frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen  \n          title="Content from Vimeo" loading="lazy"></iframe>\n        </div>'); }; const l = function (e) { let t; let n; const r = '<blockquote class="twitter-tweet"><a href="'.concat(e.href, '"></a></blockquote>'); return t = document.querySelector('head'), (n = document.createElement('script')).src = 'https://platform.twitter.com/widgets.js', n.onload = void 0, t.append(n), r; }; const c = function (e, t, n) { if (!e.classList.contains('embed-is-loaded')) { const r = [{ match: ['youtube', 'youtu.be'], embed: i }, { match: ['vimeo'], embed: a }, { match: ['twitter'], embed: l }].find(((e) => e.match.some(((e) => t.includes(e))))); const o = new URL(t); r ? (e.innerHTML = r.embed(o, n), e.classList = 'block embed embed-'.concat(r.match[0])) : (e.innerHTML = (function (e) { return '<div style="left: 0; width: 100%; height: 0; position: relative; padding-bottom: 56.25%;">\n        <iframe src="'.concat(e.href, '" style="border: 0; top: 0; left: 0; width: 100%; height: 100%; position: absolute;" allowfullscreen=""\n          scrolling="no" allow="encrypted-media" title="Content from ').concat(e.hostname, '" loading="lazy">\n        </iframe>\n      </div>'); }(o)), e.classList = 'block embed'), e.classList.add('embed-is-loaded'); } }; function u(e) { const t = e.querySelector('picture'); const n = e.querySelector('a').href; if (e.textContent = '', t) { const r = document.createElement('div'); r.className = 'embed-placeholder', r.innerHTML = '<div class="embed-placeholder-play"><button type="button" title="Play"></button></div>', r.prepend(t), r.addEventListener('click', (() => { c(e, n, !0); })), e.append(r); } else { var o = new IntersectionObserver(((t) => { t.some(((e) => e.isIntersecting)) && (o.disconnect(), c(e, n)); })); o.observe(e); } } }, 215: (e, t, n) => { n.r(t), n.d(t, { default: () => o }); const r = n(640); function o(e) { const t = Array.from(e.children, ((e) => e.firstElementChild))[1]; (0, r.default)(t); } } }]);
